
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://locviruzkdfnhusfquuc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY3ZpcnV6a2Rmbmh1c2ZxdXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwODM1MTQsImV4cCI6MjA2MjY1OTUxNH0.VJW1juYE_poSS-FTBqoZxA5xSH9WY6vsW3upb-GvJ80";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: localStorage,
    storageKey: 'sb-auth-token',
    debug: false
  },
  global: {
    headers: {
      'x-application-name': 'vulnzero'
    }
  },
  db: {
    schema: 'public'
  }
});

// Helpers to simplify queries
export const queries = {
  /**
   * Fetch a user's complete profile
   * @param userId The user ID to fetch
   */
  getUserProfile: async (userId: string | undefined) => {
    if (!userId) return null;
    
    return await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
  },
  
  /**
   * Fetch leaderboard data with optional pagination
   * @param limit Number of profiles to fetch
   * @param offset Pagination offset 
   */
  getLeaderboard: async (limit = 100, offset = 0) => {
    return await supabase
      .from('profiles')
      .select('*')
      .order('points', { ascending: false })
      .range(offset, offset + limit - 1);
  },
  
  /**
   * Update a user's profile
   * @param userId User ID to update
   * @param data Updated profile data
   */
  updateProfile: async (userId: string | undefined, data: any) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    return await supabase
      .from('profiles')
      .update(data)
      .eq('id', userId);
  }
};
