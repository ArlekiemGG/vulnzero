
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://locviruzkdfnhusfquuc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY3ZpcnV6a2Rmbmh1c2ZxdXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwODM1MTQsImV4cCI6MjA2MjY1OTUxNH0.VJW1juYE_poSS-FTBqoZxA5xSH9WY6vsW3upb-GvJ80";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: localStorage,
    storageKey: 'sb-auth-token',
  },
  global: {
    headers: {
      'x-application-name': 'vulnzero'
    }
  },
  db: {
    schema: 'public'
  }
});

// Cache for API responses to reduce redundant calls
const responseCache = new Map();
const pendingRequests = new Map();

// Helper function to handle API requests with caching
const cachedRequest = async (key: string, requestFn: () => Promise<any>, cacheDuration = 30000) => {
  // Check if we have a cached response that's still valid
  if (responseCache.has(key)) {
    const { data, expiry } = responseCache.get(key);
    if (expiry > Date.now()) {
      console.log(`Using cached data for ${key}`);
      return data;
    }
    responseCache.delete(key); // Expired cache
  }
  
  // Check for pending requests for the same data
  if (pendingRequests.has(key)) {
    console.log(`Joining pending request for ${key}`);
    return pendingRequests.get(key);
  }
  
  // Create new request promise
  const requestPromise = requestFn()
    .then(result => {
      // Cache the result
      responseCache.set(key, {
        data: result,
        expiry: Date.now() + cacheDuration
      });
      pendingRequests.delete(key);
      return result;
    })
    .catch(error => {
      pendingRequests.delete(key);
      throw error;
    });
  
  // Store the pending request
  pendingRequests.set(key, requestPromise);
  
  return requestPromise;
};

// Helpers to simplify queries
export const queries = {
  /**
   * Fetch a user's complete profile
   * @param userId The user ID to fetch
   * @returns The user profile or null if not found
   */
  getUserProfile: async (userId: string | undefined) => {
    if (!userId) return null;
    
    const cacheKey = `profile-${userId}`;
    
    return cachedRequest(cacheKey, async () => {
      console.log("Fetching user profile with ID:", userId);
      
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', userId)
          .maybeSingle();
        
        if (error) {
          console.error("Error fetching user profile:", error);
          
          if (error.code === 'PGRST116') {
            console.log("Profile not found, checking user session");
            const { data: userData } = await supabase.auth.getUser();
            
            if (userData?.user) {
              return await queries.createProfileIfNotExists(
                userData.user.id,
                userData.user.user_metadata?.username || userData.user.email?.split('@')[0] || 'User'
              );
            }
          }
          
          throw error;
        }
        
        console.log("Successfully fetched user profile:", data);
        return data;
      } catch (err) {
        console.error("Exception in getUserProfile:", err);
        throw err;
      }
    });
  },
  
  /**
   * Fetch leaderboard data with optional pagination
   * @param limit Number of profiles to fetch
   * @param offset Pagination offset 
   */
  getLeaderboard: async (limit = 100, offset = 0) => {
    const cacheKey = `leaderboard-${limit}-${offset}`;
    
    return cachedRequest(cacheKey, async () => {
      console.log("Fetching leaderboard with limit:", limit, "offset:", offset);
      
      try {
        // Check for active session
        const { data: sessionData } = await supabase.auth.getSession();
        
        // First try to get row count for debug
        const { count, error: countError } = await supabase
          .from('profiles')
          .select('*', { count: 'exact', head: true });
        
        if (countError) {
          console.error("Error counting profiles:", countError);
        } else {
          console.log("Total profiles in database:", count);
        }
        
        // Make the actual query without using single()
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .order('points', { ascending: false })
          .range(offset, offset + limit - 1);
        
        if (error) {
          console.error("Error fetching leaderboard:", error);
          throw error;
        }
        
        console.log(`Successfully fetched ${data?.length || 0} leaderboard profiles`);
        
        // If we're in development and no data, insert test profiles
        if (!data || data.length === 0) {
          console.log("No profiles found. Checking if test profiles should be created");
          
          // Only create test profiles if we have a session
          if (sessionData.session) {
            try {
              console.log("Creating test profile for current user");
              const username = sessionData.session.user.user_metadata?.username || 
                              sessionData.session.user.email?.split('@')[0] || 
                              'Test User';
              
              const { error: insertError } = await supabase
                .from('profiles')
                .insert({
                  id: sessionData.session.user.id,
                  username: username,
                  points: 100,
                  level: 1,
                  solved_machines: 5
                });
              
              if (insertError) {
                console.error("Failed to insert test profile:", insertError);
              } else {
                console.log("Successfully inserted test profile");
                // Try to get data again after insert
                const { data: newData } = await supabase
                  .from('profiles')
                  .select('*')
                  .order('points', { ascending: false })
                  .range(0, limit - 1);
                
                return newData || [];
              }
            } catch (insertErr) {
              console.error("Exception trying to insert test profile:", insertErr);
            }
          }
        }
        
        return data || [];
      } catch (err) {
        console.error("Exception in getLeaderboard:", err);
        throw err;
      }
    }, 60000); // Cache leaderboard data for 1 minute
  },
  
  /**
   * Update a user's profile
   * @param userId User ID to update
   * @param data Updated profile data
   */
  updateProfile: async (userId: string | undefined, data: any) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    console.log("Updating profile for user:", userId, "with data:", data);
    
    try {
      const response = await supabase
        .from('profiles')
        .update(data)
        .eq('id', userId);
      
      if (response.error) {
        console.error("Error updating profile:", response.error);
      } else {
        // Invalidate cache for this user
        responseCache.delete(`profile-${userId}`);
      }
      
      return response;
    } catch (err) {
      console.error("Exception in updateProfile:", err);
      throw err;
    }
  },
  
  /**
   * Create a user's profile if it doesn't exist
   * @param userId User ID 
   * @param username Username to set
   */
  createProfileIfNotExists: async (userId: string, username: string) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    const cacheKey = `profile-${userId}`;
    
    console.log("Creating profile for user if not exists:", userId);
    
    try {
      // First check if profile exists
      const { data: existingProfile, error: checkError } = await supabase
        .from('profiles')
        .select('id')
        .eq('id', userId)
        .maybeSingle();
      
      if (checkError) {
        console.error("Error checking if profile exists:", checkError);
        throw checkError;
      }
      
      // If profile doesn't exist, create it
      if (!existingProfile) {
        console.log("Profile doesn't exist, creating...");
        const { data, error: insertError } = await supabase
          .from('profiles')
          .insert({
            id: userId,
            username: username || 'New User',
            points: 0,
            level: 1,
            solved_machines: 0,
            completed_challenges: 0
          })
          .select()
          .single();
        
        if (insertError) {
          console.error("Error creating profile:", insertError);
          throw insertError;
        }
        
        // Update cache
        responseCache.set(cacheKey, {
          data: data,
          expiry: Date.now() + 30000
        });
        
        console.log("Successfully created profile:", data);
        return data;
      }
      
      console.log("Profile already exists:", existingProfile);
      return existingProfile;
    } catch (err) {
      console.error("Exception in createProfileIfNotExists:", err);
      throw err;
    }
  }
};
