
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://locviruzkdfnhusfquuc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY3ZpcnV6a2Rmbmh1c2ZxdXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwODM1MTQsImV4cCI6MjA2MjY1OTUxNH0.VJW1juYE_poSS-FTBqoZxA5xSH9WY6vsW3upb-GvJ80";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: localStorage,
    storageKey: 'sb-auth-token',
    debug: true // Habilitamos debug para ver más información de auth
  },
  global: {
    headers: {
      'x-application-name': 'vulnzero'
    }
  },
  // Fix schema configuration
  db: {
    schema: 'public'
  }
});

// Helpers to simplify queries
export const queries = {
  /**
   * Fetch a user's complete profile
   * @param userId The user ID to fetch
   * @returns The user profile or null if not found
   */
  getUserProfile: async (userId: string | undefined) => {
    if (!userId) return null;
    
    console.log("Fetching user profile with ID:", userId);
    
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (error) {
        console.error("Error fetching user profile:", error);
        throw error;
      }
      
      console.log("Successfully fetched user profile:", data);
      return data;
    } catch (err) {
      console.error("Exception in getUserProfile:", err);
      throw err;
    }
  },
  
  /**
   * Fetch leaderboard data with optional pagination
   * @param limit Number of profiles to fetch
   * @param offset Pagination offset 
   */
  getLeaderboard: async (limit = 100, offset = 0) => {
    console.log("Fetching leaderboard with limit:", limit, "offset:", offset);
    console.log("Current session:", await supabase.auth.getSession());
    
    try {
      // Verificamos que hay una sesión activa
      const { data: sessionData } = await supabase.auth.getSession();
      
      if (!sessionData.session) {
        console.warn("Warning: No active session found when fetching leaderboard");
      }
      
      // Intentamos primero obtener el conteo de filas para debug
      const { count, error: countError } = await supabase
        .from('profiles')
        .select('*', { count: 'exact', head: true });
      
      console.log("Total profiles in database:", count);
      
      if (countError) {
        console.error("Error counting profiles:", countError);
      }
      
      // Ahora hacemos la consulta real
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .order('points', { ascending: false })
        .range(offset, offset + limit - 1);
      
      if (error) {
        console.error("Error fetching leaderboard:", error);
        console.error("Error details:", JSON.stringify(error, null, 2));
        throw error;
      }
      
      console.log(`Successfully fetched ${data?.length || 0} leaderboard profiles:`, data);
      
      // Si no hay datos, insertamos un perfil de prueba para diagnosticar
      if (!data || data.length === 0) {
        console.log("No profiles found. Let's check if we can insert a test profile");
        
        // Solo intentamos insertar si hay una sesión activa
        if (sessionData.session) {
          try {
            const { error: insertError } = await supabase
              .from('profiles')
              .insert({
                id: sessionData.session.user.id,
                username: 'Test User',
                points: 100,
                level: 1,
                solved_machines: 5
              });
            
            if (insertError) {
              console.error("Failed to insert test profile:", insertError);
            } else {
              console.log("Successfully inserted test profile");
            }
          } catch (insertErr) {
            console.error("Exception trying to insert test profile:", insertErr);
          }
        }
      }
      
      return data || [];
    } catch (err) {
      console.error("Exception in getLeaderboard:", err);
      throw err;
    }
  },
  
  /**
   * Update a user's profile
   * @param userId User ID to update
   * @param data Updated profile data
   */
  updateProfile: async (userId: string | undefined, data: any) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    console.log("Updating profile for user:", userId, "with data:", data);
    
    try {
      const response = await supabase
        .from('profiles')
        .update(data)
        .eq('id', userId);
      
      if (response.error) {
        console.error("Error updating profile:", response.error);
      }
      
      return response;
    } catch (err) {
      console.error("Exception in updateProfile:", err);
      throw err;
    }
  },
  
  /**
   * Create a user's profile if it doesn't exist
   * This es útil para asegurarnos de que todos los usuarios tienen un perfil
   * @param userId User ID 
   * @param username Username to set
   */
  createProfileIfNotExists: async (userId: string, username: string) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    console.log("Creating profile for user if not exists:", userId);
    
    try {
      // First check if profile exists
      const { data: existingProfile, error: checkError } = await supabase
        .from('profiles')
        .select('id')
        .eq('id', userId)
        .maybeSingle();
      
      if (checkError) {
        console.error("Error checking if profile exists:", checkError);
        throw checkError;
      }
      
      // If profile doesn't exist, create it
      if (!existingProfile) {
        console.log("Profile doesn't exist, creating...");
        const { data, error: insertError } = await supabase
          .from('profiles')
          .insert({
            id: userId,
            username: username || 'New User',
            points: 0,
            level: 1,
            solved_machines: 0,
            completed_challenges: 0
          })
          .select()
          .single();
        
        if (insertError) {
          console.error("Error creating profile:", insertError);
          throw insertError;
        }
        
        console.log("Successfully created profile:", data);
        return data;
      }
      
      console.log("Profile already exists:", existingProfile);
      return existingProfile;
    } catch (err) {
      console.error("Exception in createProfileIfNotExists:", err);
      throw err;
    }
  }
};
