
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://locviruzkdfnhusfquuc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxvY3ZpcnV6a2Rmbmh1c2ZxdXVjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwODM1MTQsImV4cCI6MjA2MjY1OTUxNH0.VJW1juYE_poSS-FTBqoZxA5xSH9WY6vsW3upb-GvJ80";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Export type definitions for easier use in components
export type Tables = Database['public']['Tables'];
export type Profiles = Tables['profiles']['Row'];

// Fixed client configuration with explicit schema definition
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: localStorage,
    storageKey: 'sb-auth-token',
  },
  global: {
    headers: {
      'x-application-name': 'vulnzero'
    }
  },
  // Important: Explicitly set the schema to public
  db: {
    schema: 'public',
  }
});

// Enhanced Cache for API responses with deduplication and rate limiting
const responseCache = new Map();
const pendingRequests = new Map();
const requestCounts = new Map();
const REQUEST_LIMIT = 3; // Max allowed request attempts for the same data in a short period
const PENALTY_TIME = 30000; // 30-second penalty after hitting request limit
const requestTimestamps = new Map(); // Track when requests were made

// Helper function to handle API requests with enhanced caching
const cachedRequest = async (key: string, requestFn: () => Promise<any>, cacheDuration = 30000) => {
  // Rate limiting check - prevent too many repeated requests
  if (requestCounts.has(key)) {
    const count = requestCounts.get(key) || 0;
    const lastAttempt = requestTimestamps.get(key) || 0;
    const timeSinceLastAttempt = Date.now() - lastAttempt;
    
    // If we've exceeded the request limit and we're within the penalty period
    if (count >= REQUEST_LIMIT && timeSinceLastAttempt < PENALTY_TIME) {
      console.log(`Too many requests for ${key}, enforcing cooldown (${Math.round((PENALTY_TIME - timeSinceLastAttempt)/1000)}s remaining)`);
      
      // Return cached data even if expired, or reject if none exists
      if (responseCache.has(key)) {
        console.log(`Returning stale cache for ${key} during cooldown period`);
        return responseCache.get(key).data;
      }
      
      return Promise.reject(new Error(`Request rate limited for ${key}. Try again later.`));
    }
    
    // Reset counter if enough time has passed since penalty period
    if (timeSinceLastAttempt > PENALTY_TIME) {
      requestCounts.set(key, 1);
    } else {
      // Increment counter
      requestCounts.set(key, count + 1);
    }
  } else {
    // First request for this key
    requestCounts.set(key, 1);
  }
  
  // Update timestamp of the request
  requestTimestamps.set(key, Date.now());

  // Check if we have a cached response that's still valid
  if (responseCache.has(key)) {
    const { data, expiry } = responseCache.get(key);
    if (expiry > Date.now()) {
      console.log(`Using cached data for ${key}`);
      return data;
    }
    responseCache.delete(key); // Expired cache
  }
  
  // Check for pending requests for the same data
  if (pendingRequests.has(key)) {
    console.log(`Joining pending request for ${key}`);
    return pendingRequests.get(key);
  }
  
  // Create new request promise with timeout safety
  const requestPromise = Promise.race([
    requestFn(),
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error(`Request timeout for ${key}`)), 15000)
    )
  ])
    .then(result => {
      // Cache the result
      responseCache.set(key, {
        data: result,
        expiry: Date.now() + cacheDuration
      });
      pendingRequests.delete(key);
      return result;
    })
    .catch(error => {
      pendingRequests.delete(key);
      
      // If we have stale cache data, return it on error
      if (responseCache.has(key)) {
        console.warn(`Request failed for ${key}, using stale cache data:`, error);
        return responseCache.get(key).data;
      }
      
      throw error;
    });
  
  // Store the pending request
  pendingRequests.set(key, requestPromise);
  
  return requestPromise;
};

// Function to clear cache entries
export const clearCache = (keyPattern?: string) => {
  if (keyPattern) {
    // Clear specific cache entries matching the pattern
    for (const key of responseCache.keys()) {
      if (key.includes(keyPattern)) {
        console.log(`Clearing cache for ${key}`);
        responseCache.delete(key);
        requestCounts.delete(key);
        requestTimestamps.delete(key);
      }
    }
  } else {
    // Clear all cache
    responseCache.clear();
    requestCounts.clear();
    requestTimestamps.clear();
    console.log('Cleared all cache entries');
  }
};

// Safe query wrapper for better error handling
export const query = {
  /**
   * Safely execute a query with proper error handling
   * @param table The table name to query
   * @param builder A function that builds the query
   * @returns Object with data and error properties
   */
  async safe<T = any>(
    table: keyof Tables, 
    builder: (query: any) => any
  ): Promise<{ data: T | null; error: Error | null }> {
    try {
      const { data, error } = await builder(supabase.from(table));
      return { 
        data, 
        error: error ? new Error(error.message) : null 
      };
    } catch (error) {
      console.error("Query error:", error);
      return { 
        data: null, 
        error: error instanceof Error ? error : new Error(String(error)) 
      };
    }
  }
};

// Helpers to simplify queries
export const queries = {
  /**
   * Fetch a user's complete profile
   * @param userId The user ID to fetch
   * @returns The user profile or null if not found
   */
  getUserProfile: async (userId: string | undefined) => {
    if (!userId) return null;
    
    const cacheKey = `profile-${userId}`;
    
    return cachedRequest(cacheKey, async () => {
      console.log("Fetching user profile with ID:", userId);
      
      try {
        // Use the new safe query method
        const { data, error } = await query.safe<Profiles>(
          'profiles',
          q => q.select('*').eq('id', userId).maybeSingle()
        );
        
        if (error) {
          console.error("Error fetching user profile:", error);
          throw error;
        }
        
        if (!data) {
          console.log("Profile not found, attempting to create one");
          const { data: userData } = await supabase.auth.getUser();
          
          if (userData?.user) {
            return await queries.createProfileIfNotExists(
              userData.user.id,
              userData.user.user_metadata?.username || userData.user.email?.split('@')[0] || 'User'
            );
          }
          return null;
        }
        
        console.log("Successfully fetched user profile:", data);
        return data;
      } catch (err) {
        console.error("Exception in getUserProfile:", err);
        throw err;
      }
    });
  },
  
  /**
   * Fetch leaderboard data with optional pagination
   * @param limit Number of profiles to fetch
   * @param offset Pagination offset 
   */
  getLeaderboard: async (limit = 100, offset = 0) => {
    const cacheKey = `leaderboard-${limit}-${offset}`;
    
    return cachedRequest(cacheKey, async () => {
      console.log("Fetching leaderboard with limit:", limit, "offset:", offset);
      
      try {
        // Use the new safe query method
        const { data, error } = await query.safe<Profiles[]>(
          'profiles',
          q => q.select('*')
               .order('points', { ascending: false })
               .range(offset, offset + limit - 1)
        );
        
        if (error) {
          console.error("Error fetching leaderboard:", error);
          throw error;
        }
        
        console.log(`Successfully fetched ${data?.length || 0} leaderboard profiles`);
        
        // If we're in development and no data, create a test profile for current user
        if (!data || data.length === 0) {
          console.log("No profiles found. Creating a test profile for current user");
          
          // Get current user session
          const { data: sessionData } = await supabase.auth.getSession();
          
          // Only create test profile if we have a session
          if (sessionData.session) {
            try {
              const username = sessionData.session.user.user_metadata?.username || 
                              sessionData.session.user.email?.split('@')[0] || 
                              'Test User';
              
              const { data: userProfile, error: upsertError } = await supabase
                .from('profiles')
                .upsert({
                  id: sessionData.session.user.id,
                  username: username,
                  points: 100,
                  level: 1,
                  solved_machines: 5
                })
                .select();
              
              if (upsertError) {
                console.error("Failed to create test profile:", upsertError);
              } else {
                console.log("Successfully created test profile");
                // Try to get all profiles again
                const { data: refreshedData } = await query.safe<Profiles[]>(
                  'profiles',
                  q => q.select('*')
                       .order('points', { ascending: false })
                       .range(0, limit - 1)
                );
                  
                return refreshedData || [];
              }
            } catch (insertErr) {
              console.error("Exception trying to create test profile:", insertErr);
            }
          }
        }
        
        return data || [];
      } catch (err) {
        console.error("Exception in getLeaderboard:", err);
        throw err;
      }
    }, 60000); // Cache leaderboard data for 1 minute
  },
  
  /**
   * Update a user's profile
   * @param userId User ID to update
   * @param data Updated profile data
   */
  updateProfile: async (userId: string | undefined, data: any) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    console.log("Updating profile for user:", userId, "with data:", data);
    
    try {
      const response = await supabase
        .from('profiles')
        .update(data)
        .eq('id', userId);
      
      if (response.error) {
        console.error("Error updating profile:", response.error);
      } else {
        // Invalidate cache for this user
        clearCache(`profile-${userId}`);
      }
      
      return response;
    } catch (err) {
      console.error("Exception in updateProfile:", err);
      throw err;
    }
  },
  
  /**
   * Create a user's profile if it doesn't exist
   * @param userId User ID 
   * @param username Username to set
   */
  createProfileIfNotExists: async (userId: string, username: string) => {
    if (!userId) return { error: { message: 'User ID is required' } };
    
    const cacheKey = `profile-${userId}`;
    
    console.log("Creating profile for user if not exists:", userId);
    
    try {
      // First check if profile exists
      const { data: existingProfile, error: checkError } = await query.safe<Profiles>(
        'profiles',
        q => q.select('id').eq('id', userId).maybeSingle()
      );
      
      if (checkError) {
        console.error("Error checking if profile exists:", checkError);
        throw checkError;
      }
      
      // If profile doesn't exist, create it
      if (!existingProfile) {
        console.log("Profile doesn't exist, creating...");
        const { data, error: insertError } = await supabase
          .from('profiles')
          .insert({
            id: userId,
            username: username || 'New User',
            points: 0,
            level: 1,
            solved_machines: 0,
            completed_challenges: 0
          })
          .select('*')
          .maybeSingle();
        
        if (insertError) {
          console.error("Error creating profile:", insertError);
          throw insertError;
        }
        
        if (!data) {
          throw new Error("Failed to create profile: No data returned");
        }
        
        // Update cache
        responseCache.set(cacheKey, {
          data: data,
          expiry: Date.now() + 30000
        });
        
        console.log("Successfully created profile:", data);
        return data;
      }
      
      // If we get here, the profile exists but we need to return the complete profile
      const { data: completeProfile, error: fetchError } = await query.safe<Profiles>(
        'profiles',
        q => q.select('*').eq('id', userId).maybeSingle()
      );
      
      if (fetchError) {
        console.error("Error fetching existing profile:", fetchError);
        throw fetchError;
      }
      
      console.log("Profile already exists:", completeProfile);
      return completeProfile;
    } catch (err) {
      console.error("Exception in createProfileIfNotExists:", err);
      throw err;
    }
  }
};
